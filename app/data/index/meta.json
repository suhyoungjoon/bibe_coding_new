{
  "dim": 1536,
  "meta": [
    {
      "source": "/Users/syj/Downloads/agentic-ai-langgraph-azure-v2/app/data/docs/design_patterns.md",
      "chunk": "# 디자인 패턴 가이드\n\n## Strategy Pattern (전략 패턴)\n\nStrategy Pattern은 런타임에 알고리즘을 선택할 수 있게 해주는 행동 디자인 패턴입니다.\n\n### 구조\n- **Context**: Strategy를 사용하는 클래스\n- **Strategy**: 알고리즘의 인터페이스\n- **ConcreteStrategy**: 구체적인 알고리즘 구현\n\n### 장점\n- 알고리즘을 독립적으로 변경 가능\n- 코드 중복 제거\n- 확장성 향상\n\n### 사용 사례\n- 정렬 알고리즘 선택\n- 결제 방식 선택\n- 데이터 압축 방식 선택\n\n## Observer Pattern (옵저버 패턴)\n\nObserver Pattern은 객체의 상태 변화를 관찰하는 관찰자들의 목록을 객체에 등록하여 상태 변화가 있을 때마다 메서드 등을 통해 객체가 직접 목록의 각 관찰자에게 통지하도록 하는 디자인 패턴입니다.\n\n### 구조\n- **Subject**: 관찰 대상 객체\n- **Observer**: 관찰자 인터페이스\n- **ConcreteObserver**: 구체적인 관찰자\n\n### 장점\n- 느슨한 결합\n- 동적 구독/해제\n- 일대다 의존성 정의\n\n## Factory Pattern (팩토리 패턴)\n\nFactory Pattern은 객체 생성을 위한 인터페이스를 제공하되, 어떤 클래스의 인스턴스를 생성할지에 대한 결정은 서브클래스가 내리도록 하는 패턴입니다.\n\n### 구조\n- **Creator**: 팩토리 인터페이스\n- **ConcreteCreator**: 구체적인 팩토리\n- **Product**: 생성될 객체의 인터페이스\n- **ConcreteProduct**: 구체적인 객체\n\n### 장점\n- 객체 생성 로직 캡슐화\n- 클라이언트와 구체적인 클래스 분리\n- 확장성 향상\n\n",
      "lang": "markdown",
      "symbol": "",
      "mtime": "1758894746",
      "hash": "29d44665216e46c7ab1ea63a9b62255d2197a0059e04d9101a7066318db915c5"
    },
    {
      "source": "/Users/syj/Downloads/agentic-ai-langgraph-azure-v2/app/data/docs/data_analysis.py",
      "chunk": "\"\"\"\n데이터 분석 유틸리티 모듈\n통계 계산 및 데이터 처리 기능을 제공합니다.\n\"\"\"\n\nimport statistics\nfrom typing import List, Dict, Any\nimport json\n\n",
      "lang": "python",
      "symbol": "block",
      "mtime": "1758894746",
      "hash": "780244fb744ad63c8d1776630669075440c5afd3bf5f2c4d65c41b468983b709"
    },
    {
      "source": "/Users/syj/Downloads/agentic-ai-langgraph-azure-v2/app/data/docs/data_analysis.py",
      "chunk": "class DataAnalyzer:\n    \"\"\"데이터 분석을 위한 클래스\"\"\"\n    \n    def __init__(self, data: List[float]):\n        \"\"\"\n        데이터 분석기 초기화\n        \n        Args:\n            data: 분석할 숫자 데이터 리스트\n        \"\"\"\n        self.data = data\n        self.results = {}\n    \n    def calculate_basic_stats(self) -> Dict[str, float]:\n        \"\"\"\n        기본 통계 계산\n        \n        Returns:\n            기본 통계 정보 딕셔너리\n        \"\"\"\n        if not self.data:\n            return {\"error\": \"데이터가 없습니다.\"}\n        \n        stats = {\n            \"count\": len(self.data),\n            \"mean\": statistics.mean(self.data),\n            \"median\": statistics.median(self.data),\n            \"mode\": statistics.mode(self.data) if len(set(self.data)) < len(self.data) else \"No mode\",\n            \"min\": min(self.data),\n            \"max\": max(self.data),\n            \"range\": max(self.data) - min(self.data)\n        }\n        \n        # 표준편차 계산\n        if len(self.data) > 1:\n            stats[\"stdev\"] = statistics.stdev(self.data)\n            stats[\"variance\"] = statistics.variance(self.data)\n        \n        self.results = stats\n        return stats\n    \n    def find_outliers(self, threshold: float = 2.0) -> List[float]:\n        \"\"\"\n        이상치 찾기 (Z-score 기반)\n        \n        Args:\n            threshold: Z-score 임계값 (기본값: 2.0)\n            \n        Returns:\n            이상치 리스트\n        \"\"\"\n        if len(self.data) < 3:\n            return []\n        \n        mean = statistics.mean(self.data)\n        stdev = statistics.stdev(self.data)\n        \n        outliers = []\n        for value in self.data:\n            z_score = abs((value - mean) / stdev)\n            if z_score > threshold:\n                outliers.append(value)\n        \n        return outliers\n    \n    def generate_report(self) -> str:\n        \"\"\"\n        분석 보고서 생성\n        \n        Returns:\n            분석 보고서 문자열\n        \"\"\"\n        if not self.results:\n            self.calculate_basic_stats()\n        \n        report = f\"\"\"\n=== 데이터 분석 보고서 ===\n데이터 개수: {self.results.get('count', 0)}\n평균: {self.results.get('mean', 0):.2f}\n중앙값: {self.results.get('median', 0):.2f}\n최솟값: {self.results.get('min', 0):.2f}\n최댓값: {self.results.get('max', 0):.2f}\n범위: {self.results.get('range', 0):.2f}\n\"\"\"\n        \n        if 'stdev' in self.results:\n            report += f\"표준편차: {self.results['stdev']:.2f}\\n\"\n            report += f\"분산: {self.results['variance']:.2f}\\n\"\n        \n        outliers = self.find_outliers()\n        if outliers:\n            report += f\"이상치: {outliers}\\n\"\n        \n        return report\n\n",
      "lang": "python",
      "symbol": "block",
      "mtime": "1758894746",
      "hash": "780244fb744ad63c8d1776630669075440c5afd3bf5f2c4d65c41b468983b709"
    },
    {
      "source": "/Users/syj/Downloads/agentic-ai-langgraph-azure-v2/app/data/docs/data_analysis.py",
      "chunk": "def analyze_sales_data():\n    \"\"\"판매 데이터 분석 예제\"\"\"\n    sales_data = [120, 150, 180, 200, 160, 140, 170, 190, 210, 130, 250, 110]\n    \n    analyzer = DataAnalyzer(sales_data)\n    stats = analyzer.calculate_basic_stats()\n    \n    print(\"=== 판매 데이터 분석 ===\")\n    print(f\"데이터: {sales_data}\")\n    print(analyzer.generate_report())\n    \n    return stats\n\n",
      "lang": "python",
      "symbol": "block",
      "mtime": "1758894746",
      "hash": "780244fb744ad63c8d1776630669075440c5afd3bf5f2c4d65c41b468983b709"
    },
    {
      "source": "/Users/syj/Downloads/agentic-ai-langgraph-azure-v2/app/data/docs/data_analysis.py",
      "chunk": "def analyze_temperature_data():\n    \"\"\"온도 데이터 분석 예제\"\"\"\n    temperature_data = [22.5, 23.1, 24.0, 25.2, 23.8, 22.9, 24.5, 26.1, 25.8, 24.2, 23.5, 25.0]\n    \n    analyzer = DataAnalyzer(temperature_data)\n    stats = analyzer.calculate_basic_stats()\n    \n    print(\"=== 온도 데이터 분석 ===\")\n    print(f\"데이터: {temperature_data}\")\n    print(analyzer.generate_report())\n    \n    return stats\n\nif __name__ == \"__main__\":\n    print(\"데이터 분석 모듈 테스트\")\n    print(\"=\" * 50)\n    \n    # 판매 데이터 분석\n    analyze_sales_data()\n    print(\"\\n\" + \"=\" * 50)\n    \n    # 온도 데이터 분석\n    analyze_temperature_data()\n\n",
      "lang": "python",
      "symbol": "block",
      "mtime": "1758894746",
      "hash": "780244fb744ad63c8d1776630669075440c5afd3bf5f2c4d65c41b468983b709"
    },
    {
      "source": "/Users/syj/Downloads/agentic-ai-langgraph-azure-v2/app/data/docs/README.txt",
      "chunk": "Agentic AI 테스트 문서 모음\n\n이 폴더에는 Agentic AI 시스템을 테스트하기 위한 다양한 문서들이 포함되어 있습니다.\n\n포함된 파일들:\n1. design_patterns.md - 디자인 패턴 가이드\n2. Calculator.java - Java 계산기 클래스\n3. data_analysis.py - Python 데이터 분석 모듈\n\n테스트 시나리오:\n1. RAG 검색 테스트: \"Strategy 패턴에 대해 설명해주세요\"\n2. 코드 실행 테스트: \"python: print('Hello World')\"\n3. 수학 계산 테스트: \"2 + 3 * 4를 계산해주세요\"\n4. 하이브리드 검색 테스트: \"계산기 클래스의 기능을 설명해주세요\"\n\n각 문서는 서로 다른 언어와 형식으로 작성되어 하이브리드 검색 시스템의 성능을 테스트할 수 있습니다.",
      "lang": "txt",
      "symbol": "",
      "mtime": "1758894746",
      "hash": "af0240ea1cb91b64913ae666b8e74608bbf03425a54a74401f2018ae377b6138"
    },
    {
      "source": "/Users/syj/Downloads/agentic-ai-langgraph-azure-v2/app/data/docs/Calculator.java",
      "chunk": "/**\n * 간단한 계산기 클래스\n * 기본적인 사칙연산을 수행합니다.\n */\n",
      "lang": "java",
      "symbol": "Unknown#block",
      "mtime": "1758894746",
      "hash": "f11692ed79236fb7b194969c129e64c0634499604cfe9d186026eb3bba15f551"
    },
    {
      "source": "/Users/syj/Downloads/agentic-ai-langgraph-azure-v2/app/data/docs/Calculator.java",
      "chunk": "public class Calculator {\n    private double result;\n    \n    /**\n     * 생성자\n     */\n",
      "lang": "java",
      "symbol": "Calculator#block",
      "mtime": "1758894746",
      "hash": "f11692ed79236fb7b194969c129e64c0634499604cfe9d186026eb3bba15f551"
    },
    {
      "source": "/Users/syj/Downloads/agentic-ai-langgraph-azure-v2/app/data/docs/Calculator.java",
      "chunk": "    public Calculator() {\n        this.result = 0.0;\n    }\n    \n    /**\n     * 덧셈 연산\n     * @param a 첫 번째 숫자\n     * @param b 두 번째 숫자\n     * @return 계산 결과\n     */\n",
      "lang": "java",
      "symbol": "Calculator#public Calculator() {",
      "mtime": "1758894746",
      "hash": "f11692ed79236fb7b194969c129e64c0634499604cfe9d186026eb3bba15f551"
    },
    {
      "source": "/Users/syj/Downloads/agentic-ai-langgraph-azure-v2/app/data/docs/Calculator.java",
      "chunk": "    public double add(double a, double b) {\n        result = a + b;\n        return result;\n    }\n    \n    /**\n     * 뺄셈 연산\n     * @param a 첫 번째 숫자\n     * @param b 두 번째 숫자\n     * @return 계산 결과\n     */\n",
      "lang": "java",
      "symbol": "Calculator#public double add(double a, double b) {",
      "mtime": "1758894746",
      "hash": "f11692ed79236fb7b194969c129e64c0634499604cfe9d186026eb3bba15f551"
    },
    {
      "source": "/Users/syj/Downloads/agentic-ai-langgraph-azure-v2/app/data/docs/Calculator.java",
      "chunk": "    public double subtract(double a, double b) {\n        result = a - b;\n        return result;\n    }\n    \n    /**\n     * 곱셈 연산\n     * @param a 첫 번째 숫자\n     * @param b 두 번째 숫자\n     * @return 계산 결과\n     */\n",
      "lang": "java",
      "symbol": "Calculator#public double subtract(double a, double b) {",
      "mtime": "1758894746",
      "hash": "f11692ed79236fb7b194969c129e64c0634499604cfe9d186026eb3bba15f551"
    },
    {
      "source": "/Users/syj/Downloads/agentic-ai-langgraph-azure-v2/app/data/docs/Calculator.java",
      "chunk": "    public double multiply(double a, double b) {\n        result = a * b;\n        return result;\n    }\n    \n    /**\n     * 나눗셈 연산\n     * @param a 첫 번째 숫자\n     * @param b 두 번째 숫자\n     * @return 계산 결과\n     * @throws ArithmeticException 0으로 나누는 경우\n     */\n",
      "lang": "java",
      "symbol": "Calculator#public double multiply(double a, double b) {",
      "mtime": "1758894746",
      "hash": "f11692ed79236fb7b194969c129e64c0634499604cfe9d186026eb3bba15f551"
    },
    {
      "source": "/Users/syj/Downloads/agentic-ai-langgraph-azure-v2/app/data/docs/Calculator.java",
      "chunk": "    public double divide(double a, double b) {\n        if (b == 0) {\n",
      "lang": "java",
      "symbol": "Calculator#public double divide(double a, double b) {",
      "mtime": "1758894746",
      "hash": "f11692ed79236fb7b194969c129e64c0634499604cfe9d186026eb3bba15f551"
    },
    {
      "source": "/Users/syj/Downloads/agentic-ai-langgraph-azure-v2/app/data/docs/Calculator.java",
      "chunk": "            throw new ArithmeticException(\"0으로 나눌 수 없습니다.\");\n        }\n        result = a / b;\n        return result;\n    }\n    \n    /**\n     * 현재 결과값 반환\n     * @return 현재 결과\n     */\n",
      "lang": "java",
      "symbol": "Calculator#throw new ArithmeticException(\"0으로 나눌 수 없습니다.\");",
      "mtime": "1758894746",
      "hash": "f11692ed79236fb7b194969c129e64c0634499604cfe9d186026eb3bba15f551"
    },
    {
      "source": "/Users/syj/Downloads/agentic-ai-langgraph-azure-v2/app/data/docs/Calculator.java",
      "chunk": "    public double getResult() {\n        return result;\n    }\n    \n    /**\n     * 결과 초기화\n     */\n",
      "lang": "java",
      "symbol": "Calculator#public double getResult() {",
      "mtime": "1758894746",
      "hash": "f11692ed79236fb7b194969c129e64c0634499604cfe9d186026eb3bba15f551"
    },
    {
      "source": "/Users/syj/Downloads/agentic-ai-langgraph-azure-v2/app/data/docs/Calculator.java",
      "chunk": "    public void clear() {\n        result = 0.0;\n    }\n    \n    /**\n     * 메인 메서드 - 테스트용\n     */\n",
      "lang": "java",
      "symbol": "Calculator#public void clear() {",
      "mtime": "1758894746",
      "hash": "f11692ed79236fb7b194969c129e64c0634499604cfe9d186026eb3bba15f551"
    },
    {
      "source": "/Users/syj/Downloads/agentic-ai-langgraph-azure-v2/app/data/docs/Calculator.java",
      "chunk": "    public static void main(String[] args) {\n",
      "lang": "java",
      "symbol": "Calculator#public static void main(String[] args) {",
      "mtime": "1758894746",
      "hash": "f11692ed79236fb7b194969c129e64c0634499604cfe9d186026eb3bba15f551"
    },
    {
      "source": "/Users/syj/Downloads/agentic-ai-langgraph-azure-v2/app/data/docs/Calculator.java",
      "chunk": "        Calculator calc = new Calculator();\n        \n        System.out.println(\"=== 계산기 테스트 ===\");\n        System.out.println(\"10 + 5 = \" + calc.add(10, 5));\n        System.out.println(\"10 - 3 = \" + calc.subtract(10, 3));\n        System.out.println(\"4 * 6 = \" + calc.multiply(4, 6));\n        System.out.println(\"15 / 3 = \" + calc.divide(15, 3));\n    }\n}\n\n",
      "lang": "java",
      "symbol": "Calculator#Calculator calc = new Calculator();",
      "mtime": "1758894746",
      "hash": "f11692ed79236fb7b194969c129e64c0634499604cfe9d186026eb3bba15f551"
    }
  ]
}